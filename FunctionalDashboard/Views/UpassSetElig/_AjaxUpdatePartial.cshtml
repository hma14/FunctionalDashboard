@model PagedList.IPagedList<FunctionalDashboard.Dal.DataEntity.GeneralEventLog>

@using PagedList.Mvc;
@using PagedList;

<script src="~/Scripts/Common.js" type="text/javascript"></script>
<script type="text/javascript">
    $(function () {
        $('#StartDatepicker').datepicker();
        $('#EndDatepicker').datepicker();
    });

    $(function () {
        $('.btn_short2').bind("click", function () {
            $('#spinner').show();
            $('input#StartDatepicker').UpdateDateStatus({ start: $('input#StartDatepicker').val(), end: $('input#EndDatepicker').val() });
        });
    });

    $(".refresh").bind("click", function () {
        $('#spinner').fadeIn();
    });
</script>

@using (Ajax.BeginForm("AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.ProcessTimeSortParm }, new AjaxOptions
{
    HttpMethod = "GET",
    InsertionMode = InsertionMode.Replace,
    UpdateTargetId = "updateArea",
    OnSuccess = "$('input#StartDatepicker').UpdateDateStatus({ start: $('input#StartDatepicker').val(), end: $('input#EndDatepicker').val() })"
}))
{
    <table class="table">
        <tr>
            <td>
                Log Level: @Html.DropDownList("Level", "All")
            </td>

            <td>
                Category: @Html.DropDownList("Category", "All")
            </td>
            <td>
                Event: @Html.DropDownList("EventName", "All")
            </td>
            
            <td>
                Start Date:<input type="text" id="StartDatepicker" class="datefield" name="startDate" value="@Session["StartDate"]" />
            </td>
            <td>
                End Date:<input type="text" id="EndDatepicker" class="datefield" name="endDate" value="@Session["EndDate"]" />
            </td>
        </tr>
        <tr>
            <td>
                Environment: @Html.DropDownList("Env", "All")
            </td>
            <td>
                Institution ID: @Html.DropDownList("InstitutionID", "All")
            </td>
            <td>
                UniqueParticipant ID: @Html.TextBox("uniqueParticipantID")
                (Ends with)
            </td>
            <td>
                Task ID: @Html.TextBox("taskId") (Ends with)
            </td>
            <td>
                Error ID.: @Html.DropDownList("ProcessErrorID", "All")
            </td>
        </tr>
    </table>
    <table class="toExcelLink">
        <tr>
            <td>             
                @using (Html.BeginForm("AjaxUpdate", "UpassSetElig", FormMethod.Post))
                {         
                    <input class="btn_short2" type="submit" value="Filter" name="Filter" /> 
                }                         
            </td>
            <td>
                @using (Html.BeginForm("ExportExcel", "UpassSetElig", FormMethod.Post))
                {
                    <input class="btn_short2" id="ExportExcel" type="submit" value="Export to Excel" />
                }
            </td>
        </tr>

    </table>
}

<div id="spinner" class="spinner" style="display: none;">
    <img id="img-spinner" src="~/Images/ajax_loader.gif" alt="Loading" />
</div>

<table class="table">
    <tr>
        <th >
            @Ajax.ActionLink("Process time", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.ProcessTimeSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })

        </th>
        <th>
            @Ajax.ActionLink("Category", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.CategorySortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })
            (<span class="event_id_bold">id</span>)
        </th>
        <th >
            @Ajax.ActionLink("Event", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.EventSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })
            (<span class="event_id_bold">id</span>)
        </th>
        <th>
            @Ajax.ActionLink("ProgramID", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.ProgramIDSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })
        </th>
        <th>
            @Ajax.ActionLink("InstitutionID", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.InstitutionIdSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })

        </th>
        <th>
            @Ajax.ActionLink("FileStatus", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.FileStatusSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })

        </th>
        <th>
            @Ajax.ActionLink("UniqueParticipantID", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.UniqueParticipantIDSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })

        </th>
        <th>
            @Ajax.ActionLink("TSID", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.TSIDSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })

        </th>
        <th>
            @Ajax.ActionLink("Elig", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.EligSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })

        </th>
        <th>
            @Ajax.ActionLink("EligDate", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.EligDateSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })

        </th>
        <th>
            @Ajax.ActionLink("Rval", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.RvalSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })

        </th>
        <th>
            @Ajax.ActionLink("Rext", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.RextSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })

        </th>
        <th>
            @Ajax.ActionLink("URI", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.URISortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })

        </th>
        <th>
            @Ajax.ActionLink("URIType", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.URITypeSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })

        </th>
        
        <th>
            @Ajax.ActionLink("ErrorID", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.ErrorIDSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })
        </th>
        <th >
            @Ajax.ActionLink("Info/Error Description", "AjaxUpdate", "UpassSetElig", new { sortOrder = ViewBag.ErrorDescrSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateArea"
       })
        </th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @item.ProcessDatetime.ToString("yyyy-MM-dd HH:mm:ss.fff", System.Globalization.CultureInfo.InvariantCulture)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category) (<span class="event_id_bold">@item.CategoryID</span>)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Event) (<span class="event_id_bold">@item.EventID</span>)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ProgramID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.InstitutionID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FileStatus)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UniqueParticipantId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TSID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Elig)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EligDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Rval)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Rext)
            </td>
             <td>
                @Html.DisplayFor(modelItem => item.URI)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.URIType)
            </td>
            
            <td>
                @Html.DisplayFor(modelItem => item.ProcessErrorID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ProcessErrorDescr)
            </td>
        </tr>
    }

</table>

<div class="pager">
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    @Html.PagedListPager(Model, page => Url.Action("AjaxUpdate", "UpassSetElig", new { page, sortOrder = ViewBag.CurrentSort }),
                                 PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new PagedListRenderOptions() { DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded }
                                              , new AjaxOptions() { HttpMethod = "GET", InsertionMode = InsertionMode.Replace, UpdateTargetId = "updateArea" }))
</div>
