@using PagedList.Mvc;
@using PagedList;
@using FunctionalDashboard.Controllers;

<link rel="stylesheet" href="~/Content/popBox.css" type="text/css" />
<script src="~/Scripts/popBox.js" type="text/javascript"></script>
<script src="~/Scripts/Common.js" type="text/javascript"></script>
<script src="~/Scripts/EventsProgramUpass.js" type="text/javascript"></script>
<script src="~/Scripts/KnowledgeBasePopup.js" type="text/javascript"></script>



<div id="spinnerWSUpass" class="spinner" style="display: none;">
    <img id="img-spinner" src="~/Images/ajax_loader.gif" alt="Loading" />
</div>

<h5>Program - Web Service View (UPASS)</h5>
<div>
    <div style="float: left;  width: 50%;">
        <div style="float: left; width: 90%;">

            <table class="table_short">
                <caption class="caption">NCS Detail</caption>
                <tr>
                    <td class="bold">Program Name</td>
                    <td>@ViewBag.Program</td>
                </tr>
                <tr>
                    <td class="bold">NCS Organisation Name</td>
                    <td>@ViewBag.Institution</td>
                </tr>
                <tr>
                    <td class="bold">NCS Customer ID</td>
                    <td>@ViewBag.NCSCustomerID</td>
                </tr>
                <tr>
                    <td class="bold">NCS Customer Assigned ID</td>
                    <td>@ViewBag.ShortName</td>
                </tr>
            </table>
        </div>

        <div style="float: left; width: 90%;">

            <table class="table_short">
                <caption class="caption">Summary</caption>
                <tr>
                    <td class="bold">Elect Benefit Requests</td>
                    <td>@String.Format("{0:#,###0}", @ViewBag.ElectBenefitRequests)</td>

                </tr>
                <tr>
                    <td class="bold">Waive Benefit Requests</td>
                    <td>@String.Format("{0:#,###0}", @ViewBag.WaiveBenefitRequests)</td>
                </tr>
                <tr>
                    <td class="bold">Link Card Requests</td>
                    <td>@String.Format("{0:#,###0}", @ViewBag.LinkCardRequests)</td>
                </tr>
                <tr>
                    <td class="bold">Unlink Card Requests</td>
                    <td>@String.Format("{0:#,###0}", @ViewBag.UnlinkCardRequests)</td>
                </tr>
                <tr>
                    <td class="bold">Web Services Requests</td>
                    <td>@String.Format("{0:#,###0}", @ViewBag.WebServiceRequests)</td>
                </tr>
                <tr>
                    <td class="bold">Other Requests</td>
                    <td>@String.Format("{0:#,###0}", @ViewBag.OtherRequests)</td>
                </tr>
                <tr>
                    <td class="bold">Errors (Acknowledged or Cleared)</td>

                    @if (ViewBag.WSTotalErrors > 0)
                    {
                        <td class="errors">
                            @String.Format("{0:#,###0} ({1:#,###0})", @ViewBag.WSTotalErrors, @ViewBag.WSTotalClearedErrors + ViewBag.WSTotalAcknowledged)
                        </td>
                    }
                    else if (ViewBag.WSTotalAcknowledged > 0)
                    {
                        <td class="acknowledged">
                            @String.Format("{0:#,###0} ({1:#,###0})", @ViewBag.WSTotalErrors, @ViewBag.WSTotalClearedErrors + ViewBag.WSTotalAcknowledged)
                        </td>
                    }
                    else if (ViewBag.WSTotalErrors == 0 && ViewBag.WSTotalAcknowledged == 0 && ViewBag.WSTotalClearedErrors > 0)
                    {
                        <td class="warnings">
                            @String.Format("{0:#,###0} ({1:#,###0})", @ViewBag.WSTotalErrors, @ViewBag.WSTotalClearedErrors)
                        </td>
                    }
                    else
                    {
                        <td class="non-error">@ViewBag.WSTotalErrors</td>
                    }
                </tr>
            </table>
        </div>
    </div>

    <div style="float: right; width: 40%;">
        @using (Ajax.BeginForm("WSUpdateRetrievedResult", "ProgramUpass", new { sortOrder2 = ViewBag.StatusSortParm }, new AjaxOptions
    {
        HttpMethod = "GET",
        InsertionMode = InsertionMode.Replace,
        UpdateTargetId = "updateAreaWS",
        OnSuccess = "$('input#EndDatepickerUpassWS').UpdateDateStatus({ start: $('input#StartDatepickerUpassWS').val(), end: $('input#EndDatepickerUpassWS').val() })"
    }))
        {
            <table class="datepickers">
                <tr>
                    <td>
                        Request Start:
                        <input type="text" id="StartDatepickerUpassWS" class="datefield" name="startDate" value="@Session["StartDate"]" />
                    </td>
                    <td>
                        <div class="btn_short" style="visibility: hidden;"></div>
                    </td>
                </tr>
                <tr>
                    <td>
                        Request End: 
                        <input type="text" id="EndDatepickerUpassWS" class="datefield" name="endDate" value="@Session["EndDate"]" />
                    </td>
                    <td>
                        <input class="btn_short" id="submitUpassWS" type="submit" value="Select Date Range" name="SelectDate" />
                    </td>
                </tr>

            </table>
        }
    </div>
    <div style="float: right; width: 40%;">

        @using (Ajax.BeginForm("WSSearchGUID", "ProgramUpass", null, new AjaxOptions
    {
        HttpMethod = "GET",
        InsertionMode = InsertionMode.Replace,
        UpdateTargetId = "updateAreaWS"
    }))
        {
            <table class="searchs">
                <tr style="float: right">
                    <td>
                        GUID: @Html.TextBox("GUID", ViewBag.GUID as string, new { @class = "searchTextBox" })

                    </td>
                    <td>
                        <input class="btn_short" id="SearchGUID" type="submit" value="Search" name="SearchGUID" />
                    </td>
                </tr>
            </table>
        }
        @using (Ajax.BeginForm("WSSearchCSN", "ProgramUpass", null, new AjaxOptions
    {
        HttpMethod = "GET",
        InsertionMode = InsertionMode.Replace,
        UpdateTargetId = "updateAreaWS"
    }))
        {
            <table class="searchs">
                <tr style="float: right;">
                    <td>
                        Card Serial Number: @Html.TextBox("CSN", ViewBag.CSN as string, new { @class = "searchTextBox" })

                    </td>
                    <td>
                        <input class="btn_short" id="SearchCSN" type="submit" value="Search" name="SearchCSN" />
                    </td>
                </tr>

            </table>
        }
      
        <table class="toPdfLink">
            <tr>
               @* <td>
                    @using (Html.BeginForm("ExportWSPDF", "ProgramUpass", FormMethod.Post, null))
                    {
                        <input class="btn_short" id="ExportWSPDF" type="submit" value="Export to PDF" />
                    }
                </td>*@
                <td>
                    @using (Html.BeginForm("ExportWSExcel", "ProgramUpass", FormMethod.Post, null))
                    {
                        <input class="btn_short" id="ExportFileExcel" type="submit" value="Export to Excel" />
                    }
                </td>  
            </tr>
        </table>
       
    </div>
    @{int rowNo = 20;}
    @{int j = 0;}
    @if (ViewBag.WSSearchResult == null)
    {
        <div class="RetrievedResult">
            <table class="table_short">
                <caption class="caption">Web Service Stream</caption>
                <tr>
                    <th class="fixed_column_length_150">
                        @Ajax.ActionLink("Date Time Start", "WSUpdateRetrievedResult", new { sortOrderWS = ViewBag.WSDateTimeStartSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateAreaWS"
       })
                    </th>
                    <th class="fixed_column_length_150">
                        @Ajax.ActionLink("Category", "WSUpdateRetrievedResult", new { sortOrderWS = ViewBag.CategorySortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateAreaWS"
       })
                        (<span class="event_id_bold">id</span>)
                    </th>
                    <th class="fixed_column_length_500">
                        @Ajax.ActionLink("Event", "WSUpdateRetrievedResult", new { sortOrderWS = ViewBag.EventSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateAreaWS"
       })
                        (<span class="event_id_bold">id</span>)
                    </th>
                    <th class="fixed_column_length_250">
                        @Ajax.ActionLink("GUID", "WSUpdateRetrievedResult", new { sortOrderWS = ViewBag.GUIDSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateAreaWS"
       })
                    </th>
                    <th class="fixed_column_length_100">
                        Elapsed Time
                    </th>
                    <th class="fixed_column_length_400">
                        @Ajax.ActionLink("Status - Error (Acknowledged or Cleared)", "WSUpdateRetrievedResult", new { sortOrderWS = ViewBag.WSStatusSortParm }, new AjaxOptions
       {
           HttpMethod = "GET",
           InsertionMode = InsertionMode.Replace,
           UpdateTargetId = "updateAreaWS"
       })
                    </th>

                </tr>

                @foreach (var item in ViewBag.WSRetrievedResult)
                {
                    j += 1;
                    <tr>
                        <td>
                            @item.DateStart.ToString("yyyy-MM-dd HH:mm:ss.fff", System.Globalization.CultureInfo.InvariantCulture)
                        </td>
                        <td>
                            @item.Category (<span class="event_id_bold">@item.CategoryID</span>)
                        </td>
                        <td>                          
                            <a href="#" id="@string.Format("event{0}", j)"  data-id2="@item.Category"      data-id3="@item.CategoryID" 
                                                                            data-id4="@item.Event"         data-id5="@item.EventID" 
                                                                            data-id6="@User.Identity.Name" data-id7="@DateTime.Now"> 
                                        @item.Event (<span class="event_id_bold">@item.EventID</span>)
                            </a>
                            <a href="#" id="@string.Format("cate{0}", j)" data-id="@item.ID">[+]</a>
                            <div id="@string.Format("events{0}", j)"></div>
                        </td>
                        <td>
                            @if (!String.IsNullOrEmpty(@item.GUID))
                            {
                                @Html.ActionLink(String.Format("{0}", @item.GUID) as String,
                                                    "Index",
                                                    "UpassUserDetail",
                                                    new
                                                    {
                                                        institutionID = @item.InstitutionID,
                                                        guid = @item.GUID,
                                                        csn = @item.CSN,
                                                    },
                                                    null)
                            }
                            else
                            {
                                @item.GUID
                            }
                        </td>
                        <td>
                            @{
                                var ts = ((ProgramUpassController)this.ViewContext.Controller).GetElapsedTime(@item.Events);
                                @Html.Raw(ts.Duration());
                            }                            
                        </td>

                        @if (@item.Errors > 0)
                        {
                            <td class="errors">
                                @String.Format("ERROR {0:#,###0} ({1:#,###0})", @item.Errors, @item.Acknowledged + @item.ClearedErrors)
                                <a id=@(rowNo += 1) class="errorlink" href="#">Description and StackTrace</a>
                                <p class="error_description">
                                    @item.ErrorDescr<br />
                                    <b>Stack Trace: </b>
                                    <br />@item.StackTrace
                                </p>
                            </td>
                        }
                        else if (@item.Acknowledged > 0)
                        {
                            <td class="acknowledged">
                                @String.Format("ACKNOWLEDGED {0:#,###0} ({1:#,###0})", @item.Errors, @item.Acknowledged + @item.ClearedErrors)
                            </td>
                        }
                        else if (@item.Acknowledged == 0 && @item.TotalErrors == 0 && @item.ClearedErrors > 0)
                        {
                            <td class="warnings">
                                @String.Format("CLEARED ({0:#,###0})", @item.ClearedErrors)
                            </td>
                        }
                        else
                        {
                            <td class="non-error">
                                Completed
                            </td>
                        }
                    </tr>
                }
            </table>

            <div class="pager" style="font-size: .5em; margin-top: -5px;">
                Page @(ViewBag.WSRetrievedResult.PageCount < ViewBag.WSRetrievedResult.PageNumber ? 0 : ViewBag.WSRetrievedResult.PageNumber) of @ViewBag.WSRetrievedResult.PageCount

                @Html.PagedListPager(ViewBag.WSRetrievedResult as PagedList.IPagedList<FunctionalDashboard.ViewModels.UpassProgramWebService>, page => Url.Action("WSUpdateRetrievedResult", "ProgramUpass", new { page, sortOrder = ViewBag.WSCurrentSort }),
                                 PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new PagedListRenderOptions() { DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded }
                                      , new AjaxOptions() { HttpMethod = "GET", UpdateTargetId = "updateAreaWS" }))

            </div>
        </div>
    }
    else
    {
        <div class="searchResult">
            <table class="table_short" style="clear: both;">
                <caption class="caption">Search Results for @ViewBag.ShortName: <strong style="font-size: 1em; color: red;">@Session["WSKeyword"]</strong></caption>
                <tr>
                    <th class="fixed_column_length_150">
                        @Ajax.ActionLink("Date Time Start", "WSUpdateSearchResult", new { sortOrderWS = ViewBag.WSDateTimeStartSortParm }, new AjaxOptions
                   {
                       HttpMethod = "GET",
                       InsertionMode = InsertionMode.Replace,
                       UpdateTargetId = "updateAreaWS"
                   })
                    </th>
                    <th class="fixed_column_length_150">
                        @Ajax.ActionLink("Category", "WSUpdateSearchResult", new { sortOrderWS = ViewBag.CategorySortParm }, new AjaxOptions
                   {
                       HttpMethod = "GET",
                       InsertionMode = InsertionMode.Replace,
                       UpdateTargetId = "updateAreaWS"
                   })
                        (<span class="event_id_bold">id</span>)
                    </th>
                    <th class="fixed_column_length_500">
                        @Ajax.ActionLink("Event", "WSUpdateSearchResult", new { sortOrderWS = ViewBag.EventSortParm }, new AjaxOptions
                   {
                       HttpMethod = "GET",
                       InsertionMode = InsertionMode.Replace,
                       UpdateTargetId = "updateAreaWS"
                   })
                        (<span class="event_id_bold">id</span>)
                    </th>
                    <th class="fixed_column_length_250">
                        @Ajax.ActionLink("GUID", "WSUpdateRetrievedResult", new { sortOrderWS = ViewBag.GUIDSortParm }, new AjaxOptions
                   {
                       HttpMethod = "GET",
                       InsertionMode = InsertionMode.Replace,
                       UpdateTargetId = "updateAreaWS"
                   })
                    </th>
                    <th class="fixed_column_length_100">
                        Elapsed Time
                    </th>
                    <th class="fixed_column_length_400">
                        @Ajax.ActionLink("Status - Error (Acknowledged or Cleared)", "WSUpdateSearchResult", new { sortOrderWS = ViewBag.WSStatusSortParm }, new AjaxOptions
                   {
                       HttpMethod = "GET",
                       InsertionMode = InsertionMode.Replace,
                       UpdateTargetId = "updateAreaWS"
                   })
                    </th>

                </tr>
                @foreach (var item in ViewBag.WSSearchResult)
                {
                    j += 1;
                    <tr>
                        <td>
                            @item.DateStart.ToString("yyyy-MM-dd HH:mm:ss.fff", System.Globalization.CultureInfo.InvariantCulture)
                        </td>
                        <td>
                            @item.Category (<span class="event_id_bold">@item.CategoryID</span>)
                        </td>
                        <td>
                            <a href="#" id="@string.Format("event{0}", j)"  data-id2="@item.Category"      data-id3="@item.CategoryID" 
                                                                            data-id4="@item.Event"         data-id5="@item.EventID" 
                                                                            data-id6="@User.Identity.Name" data-id7="@DateTime.Now"> 
                                        @item.Event (<span class="event_id_bold">@item.EventID</span>)
                            </a>
                            <a href="#" id="@string.Format("cate{0}", j)" data-id="@item.ID">[+]</a>
                            <div id="@string.Format("events{0}", j)"></div>
                        </td>
                        <td>
                            @if (!String.IsNullOrEmpty(@item.GUID))
                            {
                                @Html.ActionLink(String.Format("{0}", @item.GUID) as String,
                                                    "Index",
                                                    "UpassUserDetail",
                                                    new
                                                    {
                                                        institutionID = @item.InstitutionID,
                                                        guid = @item.GUID,
                                                        csn = @item.CSN,
                                                    },
                                                    null)
                            }
                            else
                            {
                                @item.GUID
                            }
                        </td>
                        <td>
                            @{
                                var ts = ((ProgramUpassController)this.ViewContext.Controller).GetElapsedTime(@item.Events);
                                @Html.Raw(ts.Duration());
                            } 
                            
                        </td>
                         @if (@item.Errors > 0)
                        {
                            <td class="errors">
                                @String.Format("ERROR {0:#,###0} ({1:#,###0})", @item.Errors, @item.Acknowledged + @item.ClearedErrors)
                                <a id=@(rowNo += 1) class="errorlink" href="#">Description and StackTrace</a>
                                <p class="error_description">
                                    @item.ErrorDescr<br />
                                    <b>Stack Trace: </b>
                                    <br />@item.StackTrace
                                </p>
                            </td>
                        }
                        else if (@item.Acknowledged > 0)
                        {
                            <td class="acknowledged">
                                @String.Format("ACKNOWLEDGED {0:#,###0} ({1:#,###0})", @item.Errors, @item.Acknowledged + @item.ClearedErrors)
                            </td>
                        }
                        else if (@item.Acknowledged == 0 && @item.TotalErrors == 0 && @item.ClearedErrors > 0)
                        {
                            <td class="warnings">
                                @String.Format("CLEARED ({0:#,###0})", @item.ClearedErrors)
                            </td>
                        }
                        else
                        {
                            <td class="non-error">
                                Completed
                            </td>
                        }
                    </tr>
                }


            </table>

            <div class="pager" style="font-size: .5em; margin-top: -5px;">
                Page @(ViewBag.WSSearchResult.PageCount < ViewBag.WSSearchResult.PageNumber ? 0 : ViewBag.WSSearchResult.PageNumber) of @ViewBag.WSSearchResult.PageCount

                @Html.PagedListPager(ViewBag.WSSearchResult as PagedList.IPagedList<FunctionalDashboard.ViewModels.UpassProgramWebService>, page => Url.Action("WSUpdateSearchResult", "ProgramUpass", new { page, sortOrder = ViewBag.WSCurrentSort }),
                                 PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new PagedListRenderOptions() { DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded }
                                      , new AjaxOptions() { HttpMethod = "GET", UpdateTargetId = "updateAreaWS" }))

            </div>
        </div>
    }
</div>
